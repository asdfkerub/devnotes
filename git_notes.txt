Git Commands
===============
1) git add .
2) git commit -m
3) git push origin [branch name]
4) git checkout master
5) git merge [branch name]
6) git push
===============
• git init - initialize the repository.
• git add . - add all the files that were changed since the last back up to the staging area.
• git status - shows you all the files that were changed since the last backup and which ones are already added to the staging area.
• git commit -m "..." - commits the changes to the repository.
• git checkout ____ - switches to the branch name provided in your git repository. This will create a new branch if the name provided doesn't exist.
• git branch - shows all of your git branches and marks the one you are currently on.
  - git branch <name> : adds a branch
  - - * use  Branch if:
  - - - -  Preparting to make big changes
  - - - -  Are about to reset changes that you dont want to loose.
  - - - -  About to work on a new feature that may or may not be included on the final project
  - - - -  Experimental changes
  - - - -  Bug Fixes
  - git branch <new branch name> <old branch>
  - - * if you want to make a branch of an old branch
  - git branch <new branch name> master
  - - * if you want to make a new branch from the master.
• git checkout [branch name] : go to a branch
• git log - shows all the backups created in the repository.
  ⁃ git log -p : shows what is different in revisions
  ⁃ git log -2 : shows (-2) how many to log
• git diff —stat [commit hash] : shows the amount of code that has been modified since a specific commit
• git revert -n [commit hash] : reverts to an old commit
  ⁃ * revert to most recent commit first so theres no conflict of codes
  ⁃ use never over reset
• git reset [commit hash] --hard : complete removes files even on the log
  ⁃ git reset [commit hash] [file name] —hard : if want to reset specific file instead of the whole project files
• git blame ____ - shows who wrote which line of code or in other words who is to be blamed for that particular line of code.
• git remote add origin ____ - tells git to add a remote place called 'origin' to a remote URL ___.
• git push - pushes the changes in your local repository to the remote repository.
• git pull - pulls the changes in a remote repository to your own local repository.
• git clone ___ - clones a remote repository in ___ to your own local folder.
• git fork
  - similar to git clone but mainly used to create a copy of respotory/project that you can modify independently with out changing the original respotory.
• git pull request
  - once changes are done to forked rep. you can pull request from the original owner you forked from. Then the owner decide whether or not to use the changes 
    into their respo.
• git merge : merges to respotory
  - merges all branch to the respotory
  - * needs to be in master first before merge
  - git merge --squash [branch to merge]
  - - * Takes all the commits of one of the branch and pu it together with the other branch its mergin with.
  - - - Help full when creating a new feature or fixing a bug that requires some experimentation.
• git push origin [branch name]
  - links the branch to the master
  - checkout master first then push
  - * HAVE TO DO THIS EVERY EDIT
• git pull origin master
  - do this after merging from github


FORK VS CLONE
-------------

Fork : A remote, server side copy of the respotory, distict from the original.
  - Use if:
    - Your not one of the people directly involved in the project. No "ownership"
    - Your part of a very big team.
    - Your contributions to the project need approval before it gets incorporated

Clone : not a fork, clone is a local copy of some remote respotory.
git clone [url]
 - Use if:
    - Your the only one working on the project.
    - Your part of a small team.

====================
COLLABORATIONS STEPS
====================
1) Create a project respotory
2) Cloe that respotory to your local machine.
3) To work on something new create a descriptively-named branch on GitHub
4) Create a branch with the same name on your local respotory. Pull the GitHub branch to your local branch.
5) Follow the workflow like normally would.
6) Regullarly push your work to GitHub branch! (After every major commit on your local machine).


========================
LINKING GITHUB RESPOTORY
========================
1) git remote add origin [url]
2) git push -u origin master
